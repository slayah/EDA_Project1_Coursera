ggplot(data=temp, aes(x=date, y=tdbt, group=entityName,col=entityName)) + labs(title="Total DB Time",y="Total DB Time") +
geom_line()
}
plot_rt<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=trt, group=entityName,col=entityName)) + labs(title="Total Response Time",y="Total Response Time") +
geom_line()
}
create_serverrequest_metrics_peakTime<-function(temp,peakHours=9:18,peakRange=50:100,peakLowRange=25:55,lowRange=1:30,errorRange=0:5,
tstRange=1:5, tetRange=5:30, tastRange=30:40, tdbtRange=40:100,trtRange=175:200,factor=0.05,errorFactor=0.04){
##Function to hav higher count value during peak time Mon-Fri 9-6,lower traffic during non peak hours on weekdays and minimal on weekends##
##temp:to update timestamp,temp2:to update count##
metrics<-data.frame()
x=5
s=sample(1:100,1)
f=1
for(j in 1:30){
##Logic to increase/decrease range factor every 3 days##
if(j %% 3 == 0){
peakRange=ceiling(peakRange*(1+factor*f))
peakLowRange=ceiling(peakLowRange*(1+factor*f))
lowRange=ceiling(lowRange*(1+factor*f))
tstRange=ceiling(tstRange*(1+factor*f))
tetRange=ceiling(tetRange*(1+factor*f))
tastRange=ceiling(tastRange*(1+factor*f))
tdbtRange=ceiling(tdbtRange*(1+factor*f))
trtRange=ceiling(trtRange*(1+factor*f))
errorRange=ceiling(errorRange*(1+errorFactor*f))
f=f+1
}
for(i in 1:288){
set.seed(s)
temp2<-temp
dt<-as.POSIXct((temp2$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
if(weekdays(dt) == "Saturday" | weekdays(dt) == "Sunday")
count<-sample(lowRange,1)
else{
if(hour(dt) >= peakHours[1] & hour(dt)<=tail(peakHours,1))
count<-sample(peakRange,1)
else
count<-sample(peakLowRange,1)
}
#f1=runif(1,1,3)
#f2=runif(1,1,3)
error<-sample(errorRange,1)
#c<-as.numeric(temp2$fieldValues[[1]][8])
#tst<-as.numeric(temp2$fieldValues[[1]][11])
#tast<-as.numeric(temp2$fieldValues[[1]][14])
#tdbt<-as.numeric(temp2$fieldValues[[1]][17])
#trt<-as.numeric(temp2$fieldValues[[1]][6])
tst<-sample(tstRange,1)
tet<-sample(tetRange,1)
tast<-sample(tastRange,1)
tdbt<-sample(tdbtRange,1)
trt<-sample(trtRange,1)
tst<-tst*count
tet<-tet*count
tast<-tast*count
tdbt<-tdbt*count
trt<-trt*count
temp2$fieldValues[[1]][8]<-as.character(count)
temp2$fieldValues[[1]][7]<-as.character(error)
temp2$fieldValues[[1]][6]<-as.character(trt)
temp2$fieldValues[[1]][11]<-as.character(tst)
temp2$fieldValues[[1]][14]<-as.character(tast)
temp2$fieldValues[[1]][17]<-as.character(tdbt)
temp2$fieldValues[[1]][20]<-as.character(tet)
metrics<-rbind(metrics,temp2)
t=start_timestamp+x*60*1000
temp$collectionTs=t
x=x+5
s=s+1
}
}
metrics
}
get_derived_measures<-function(all_serverrequest_metrics){
dt<-as.POSIXct((all_serverrequest_metrics$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
all_serverrequest_metrics$day=day(dt)
all_serverrequest_metrics$month=month(dt)
fv<-all_serverrequest_metrics$fieldValues
#dd  <-  as.data.frame(matrix(unlist(fv), nrow=length(unlist(fv[1]))))
for(i in 1:nrow(all_serverrequest_metrics)){
all_serverrequest_metrics$reqCount[i]<-as.numeric(fv[[i]][8])
all_serverrequest_metrics$error[i]<-as.numeric(fv[[i]][7])
all_serverrequest_metrics$st[i]<-as.numeric(fv[[i]][11])
all_serverrequest_metrics$ast[i]<-as.numeric(fv[[i]][14])
all_serverrequest_metrics$dbt[i]<-as.numeric(fv[[i]][17])
all_serverrequest_metrics$et[i]<-as.numeric(fv[[i]][20])
all_serverrequest_metrics$rt[i]<-as.numeric(fv[[i]][6])
}
dmetrics<-all_serverrequest_metrics %>%
group_by(entityName,month,day) %>%
summarise(reqCount = sum(reqCount),error= sum(error),tot_st = sum(st),tot_et = sum(et),
tot_ast = sum(ast),tot_dbt = sum(dbt),tot_rt = sum(rt))
dmetrics<-mutate(dmetrics,
tst = tot_st/reqCount,
tet = tot_et/reqCount,
tast = tot_ast/reqCount,
tdbt = tot_dbt/reqCount,
trt = tot_rt/reqCount)
for(i in 1:nrow(dmetrics)){
d1<-paste("2016-",as.character(dmetrics[[2]][i]),"-",as.character(dmetrics[[3]][i]),sep = "")
dmetrics$date[i]<-d1
}
dmetrics$date<-as.POSIXct(dmetrics$date,origin = "1970-01-01",tz="UTC")
dmetrics
}
serverrequest_metrics<-readJSON()
#page_entities<-unique(page_metrics$entityName)
serverrequest_metrics_unique<-serverrequest_metrics[!duplicated(serverrequest_metrics$entityName),]
#serverrequest_metrics_unique$entityName
s=123123
all_serverrequest_metrics<-data.frame()
for(i in 1:nrow(serverrequest_metrics_unique)){
if(i==11)
break
sample<-serverrequest_metrics_unique[i,]
sample$collectionTs=start_timestamp
set.seed(s)
if(i==4|| i==3)
metrics<-create_serverrequest_metrics_peakTime(sample,peakRange = 4200:5000,peakLowRange = 3300:4200,lowRange = 2800:3300,errorRange=50:90,
tstRange=30:35, tetRange=35:60, tastRange=60:70, tdbtRange=70:130,trtRange=295:310, factor=0.03,errorFactor = 0.022)
else if(i==1)
metrics<-create_serverrequest_metrics_peakTime(sample,peakRange = 1400:1500,peakLowRange = 1200:1400,lowRange = 1000:1200,errorRange=0:50,
tstRange=1:5, tetRange=5:30, tastRange=30:40, tdbtRange=40:100,trtRange=175:200, factor=0.04,errorFactor = 0.03)
else if(i==2)
metrics<-create_serverrequest_metrics_peakTime(sample,peakRange = 2400:2500,peakLowRange = 2200:2400,lowRange = 2000:1200,errorRange=0:50,
tstRange=1:5, tetRange=5:30, tastRange=30:40, tdbtRange=40:100,trtRange=175:200, factor=0.02,errorFactor = 0.01)
else if(i==5 || i==6|| i==7)
metrics<-create_serverrequest_metrics_peakTime(sample,peakRange = 6700:7500,peakLowRange = 5800:6700,lowRange = 5000:5800,errorRange=90:180,
tstRange=50:55, tetRange=55:80, tastRange=80:90, tdbtRange=90:150, trtRange=375:400, factor=0.02,errorFactor = 0.01)
else
metrics<-create_serverrequest_metrics_peakTime(sample,peakRange = 9200:10000,peakLowRange = 8300:9200,lowRange = 7500:8300,errorRange=180:300,
tstRange=100:105, tetRange=105:130, tastRange=130:140, tdbtRange=140:200,trtRange=575:600, factor=-0.015,errorFactor = -0.02)
all_serverrequest_metrics<-rbind(all_serverrequest_metrics,metrics)
filename<-paste("Sim_ServerRequest_Metrics_",i,"_30days",".json",sep = "")
mj<-toJSON(metrics,pretty=TRUE)
write(mj,file=filename)
print(i)
s=s+1
}
all_entities<-serverrequest_metrics_unique$entityName
#entities<-c("EToiBY7mJJRYRIMT/zbsNkJO2Bg=AD","73ppUAkFC0+N8eG0LGt29O3K1xk=")
dmetrics<-get_derived_measures(all_serverrequest_metrics)
library(jsonlite)
library(lubridate)
library(dplyr)
library(ggplot2)
readJSON<-function(json_file="all/PageMetrics_COMBINED.json"){
json_data <- fromJSON(txt=json_file)
#json_data<-json_data[order("collectionTs"),]
json_data
}
start_timestamp<-1459081800000  #2016-03-27 12:30:00 UTC
#as.POSIXct(start_timestamp/1e3,origin = "1970-01-01",tz="UTC")
plot_viewCount<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=viewCount, group=entityName,col=entityName)) +
geom_line()
}
plot_error<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=error, group=entityName,col=entityName)) +
geom_line()
}
plot_fbt<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=tfbt, group=entityName,col=entityName)) +
geom_line()
}
plot_rt<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=trt, group=entityName,col=entityName)) +
geom_line()
}
plot_dit<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=tdit, group=entityName,col=entityName)) +
geom_line()
}
create_page_metrics_peakTime<-function(temp,peakHours=9:18,peakRange=50:100,peakLowRange=25:55,lowRange=1:30,errorRange=0:5,factor=0.05,
fbtRange=30:50,ditRange=50:70,trtRange=120:140,errorFactor=0.04){
##Function to hav higher count value during peak time Mon-Fri 9-6,lower traffic during non peak hours on weekdays and minimal on weekends##
##temp:to update timestamp,temp2:to update count##
metrics<-data.frame()
x=5
s=sample(1:100,1)
f=1
for(j in 1:30){
##Logic to increase/decrease range factor every 3 days##
if(j %% 3 == 0){
peakRange=ceiling(peakRange*(1+factor*f))
peakLowRange=ceiling(peakLowRange*(1+factor*f))
lowRange=ceiling(lowRange*(1+factor*f))
errorRange=ceiling(errorRange*(1+errorFactor*f))
fbtRange=ceiling(fbtRange*(1+factor*f))
ditRange=ceiling(ditRange*(1+factor*f))
trtRange=ceiling(trtRange*(1+factor*f))
f=f+1
}
for(i in 1:288){
set.seed(s)
temp2<-temp
dt<-as.POSIXct((temp2$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
if(weekdays(dt) == "Saturday" | weekdays(dt) == "Sunday")
count<-sample(lowRange,1)
else{
if(hour(dt) >= peakHours[1] & hour(dt)<=tail(peakHours,1))
count<-sample(peakRange,1)
else
count<-sample(peakLowRange,1)
}
#f1=runif(1,1,3)
#f2=runif(1,1,3)
#frt=sample(3:7,1)
#ffbt=sample(2:6,1)
error<-sample(errorRange,1)
#c<-as.numeric(temp2$fieldValues[[1]][1])
tfbt<-sample(fbtRange,1)
tdit<-sample(ditRange,1)
trt<-sample(trtRange,1)
#tfbt<-as.numeric(temp2$fieldValues[[1]][5])
#trt<-as.numeric(temp2$fieldValues[[1]][11])
tfbt<-(tfbt)*count
trt<-(trt)*count
tdit<-(tdit)*count
temp2$fieldValues[[1]][1]<-as.character(count)
temp2$fieldValues[[1]][2]<-as.character(error)
temp2$fieldValues[[1]][5]<-as.character(tfbt)
temp2$fieldValues[[1]][8]<-as.character(tdit)
temp2$fieldValues[[1]][11]<-as.character(trt)
metrics<-rbind(metrics,temp2)
t=start_timestamp+x*60*1000
temp$collectionTs=t
x=x+5
s=s+1
}
}
metrics
}
get_derived_measures<-function(all_page_metrics){
dt<-as.POSIXct((all_page_metrics$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
all_page_metrics$day=day(dt)
all_page_metrics$month=month(dt)
fv<-all_page_metrics$fieldValues
#dd  <-  as.data.frame(matrix(unlist(fv), nrow=length(unlist(fv[1]))))
for(i in 1:nrow(all_page_metrics)){
all_page_metrics$viewCount[i]<-as.numeric(fv[[i]][1])
all_page_metrics$error[i]<-as.numeric(fv[[i]][2])
all_page_metrics$fbt[i]<-as.numeric(fv[[i]][5])
all_page_metrics$dit[i]<-as.numeric(fv[[i]][8])
all_page_metrics$rt[i]<-as.numeric(fv[[i]][11])
}
dmetrics<-all_page_metrics %>%
group_by(entityName,month,day) %>%
summarise(viewCount = sum(viewCount),error= sum(error),tot_fbt = sum(fbt),tot_rt = sum(rt),tot_dit = sum(dit))
dmetrics<-mutate(dmetrics,
tfbt = tot_fbt/viewCount,
trt = tot_rt/viewCount,
tdit = tot_dit/viewCount)
for(i in 1:nrow(dmetrics)){
d1<-paste("2016-",as.character(dmetrics[[2]][i]),"-",as.character(dmetrics[[3]][i]),sep = "")
dmetrics$date[i]<-d1
}
dmetrics$date<-as.POSIXct(dmetrics$date,origin = "1970-01-01",tz="UTC")
dmetrics
}
page_metrics<-readJSON()
#page_entities<-unique(page_metrics$entityName)
page_metrics_unique<-page_metrics[!duplicated(page_metrics$entityName),]
sample<-page_metrics_unique[1,]
sample$collectionTs=start_timestamp
#higher load during peak hours
s=1237123
all_page_metrics<-data.frame()
for(i in 1:nrow(page_metrics_unique)){
sample<-page_metrics_unique[i,]
sample$collectionTs=start_timestamp
set.seed(s)
if(i==1 )
metrics<-create_page_metrics_peakTime(sample,peakRange = 650:750,peakLowRange = 550:650,lowRange = 500:550,errorRange=1:5,factor=0.04,
fbtRange=50:70,ditRange=70:90,trtRange=160:180,errorFactor = 0.03)
else if(i==2)
metrics<-create_page_metrics_peakTime(sample,peakRange = 900:1000,peakLowRange = 800:900,lowRange = 750:800,errorRange=5:10,factor=0.05,
fbtRange=70:90,ditRange=90:110,trtRange=200:220,errorFactor = 0.04)
else if(i==3 || i==4 || i==7 || i==6)
metrics<-create_page_metrics_peakTime(sample,peakRange = 400:500,peakLowRange = 200:400,lowRange = 1:200,errorRange=10:15,factor=0.01,
fbtRange=30:50,ditRange=50:70,trtRange=120:140,errorFactor = 0.005)
else if(i==5)
metrics<-create_page_metrics_peakTime(sample,peakRange = 1400:1500,peakLowRange = 1200:1400,lowRange = 1000:1200,errorRange=15:20,factor=0.02,
fbtRange=90:110,ditRange=110:130,trtRange=240:260,errorFactor = 0.01)
else if(i==8)
metrics<-create_page_metrics_peakTime(sample,peakRange = 1900:2000,peakLowRange = 1700:1900,lowRange = 1500:1700,errorRange=20:30,factor=0.03,
fbtRange=110:130,ditRange=130:150,trtRange=280:300,errorFactor = 0.02)
else
metrics<-create_page_metrics_peakTime(sample,peakRange = 2400:2500,peakLowRange = 2200:2400,lowRange = 2000:2200,errorRange=30:40,factor=-0.02,
fbtRange=130:150,ditRange=150:170,trtRange=320:340,errorFactor = -0.02)
all_page_metrics<-rbind(all_page_metrics,metrics)
filename<-paste("Sim_Page_Metrics_",i,"_30days",".json",sep = "")
mj<-toJSON(metrics,pretty=TRUE)
write(mj,file=filename)
print(i)
s=s+1
}
all_entities<-page_metrics_unique$entityName
entities<-c("EToiBY7mJJRYRIMT/zbsNkJO2Bg=AD","73ppUAkFC0+N8eG0LGt29O3K1xk=")
dmetrics<-get_derived_measures(all_page_metrics)
library(jsonlite)
library(lubridate)
readJSON<-function(json_file="all/AjaxMetrics.json"){
json_data <- fromJSON(txt=json_file)
#json_data<-json_data[order("collectionTs"),]
json_data
}
start_timestamp<-1459081800000  #2016-03-27 12:30:00 UTC
plot_callCount<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=callCount, group=entityName,col=entityName)) +
geom_line()
}
plot_error<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=error, group=entityName,col=entityName)) +
geom_line()
}
plot_dft<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=tdft, group=entityName,col=entityName)) +
geom_line()
}
plot_rt<-function(dmetrics,entities){
temp<-dmetrics[dmetrics$entityName %in% entities,]
ggplot(data=temp, aes(x=date, y=trt, group=entityName,col=entityName)) +
geom_line()
}
create_ajax_metrics_peakTime<-function(temp,peakHours=9:18,peakRange=50:100,peakLowRange=25:55,lowRange=1:30,
dftRange= 0:10,trtRange = 24:28,errorRange=0:5,factor=0.05,errorFactor=0.04){
##Function to hav higher count value during peak time Mon-Fri 9-6,lower traffic during non peak hours on weekdays and minimal on weekends##
##temp:to update timestamp,temp2:to update count##
metrics<-data.frame()
x=5
s=sample(1:100,1)
f=1
for(j in 1:30){
##Logic to increase/decrease range factor every 3 days##
if(j %% 3 == 0){
peakRange=ceiling(peakRange*(1+factor*f))
peakLowRange=ceiling(peakLowRange*(1+factor*f))
lowRange=ceiling(lowRange*(1+factor*f))
errorRange=ceiling(errorRange*(1+errorFactor*f))
dftRange=ceiling(dftRange*(1+factor*f))
trtRange=ceiling(trtRange*(1+factor*f))
f=f+1
}
for(i in 1:288){
set.seed(s)
temp2<-temp
dt<-as.POSIXct((temp2$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
if(weekdays(dt) == "Saturday" | weekdays(dt) == "Sunday")
count<-sample(lowRange,1)
else{
if(hour(dt) >= peakHours[1] & hour(dt)<=tail(peakHours,1))
count<-sample(peakRange,1)
else
count<-sample(peakLowRange,1)
}
#f1=runif(1,1,3)
#f2=runif(1,1,3)
frt=runif(1,1.1,2)
error<-sample(errorRange,1)
c<-as.numeric(temp2$fieldValues[[1]][1])
tdft<-as.numeric(temp2$fieldValues[[1]][4])
trt<-as.numeric(temp2$fieldValues[[1]][8])
tdft<-sample(dftRange,1)
trt<-sample(trtRange,1)
tdft<-tdft*count
trt<-trt*count
temp2$fieldValues[[1]][1]<-as.character(count)
temp2$fieldValues[[1]][5]<-as.character(error)
temp2$fieldValues[[1]][4]<-as.character(tdft)
temp2$fieldValues[[1]][8]<-as.character(trt)
metrics<-rbind(metrics,temp2)
t=start_timestamp+x*60*1000
temp$collectionTs=t
x=x+5
s=s+1
}
}
metrics
}
get_derived_measures<-function(all_page_metrics){
dt<-as.POSIXct((all_page_metrics$collectionTs)/1e3,origin = "1970-01-01",tz="UTC")
all_page_metrics$day=day(dt)
all_page_metrics$month=month(dt)
fv<-all_page_metrics$fieldValues
#dd  <-  as.data.frame(matrix(unlist(fv), nrow=length(unlist(fv[1]))))
for(i in 1:nrow(all_page_metrics)){
all_page_metrics$callCount[i]<-as.numeric(fv[[i]][1])
all_page_metrics$error[i]<-as.numeric(fv[[i]][5])
all_page_metrics$dft[i]<-as.numeric(fv[[i]][4])
all_page_metrics$rt[i]<-as.numeric(fv[[i]][8])
}
dmetrics<-all_page_metrics %>%
group_by(entityName,month,day) %>%
summarise(callCount = sum(callCount),error= sum(error),tot_dft = sum(dft),tot_rt = sum(rt))
dmetrics<-mutate(dmetrics,
tdft = tot_dft/viewCount,
trt = tot_rt/viewCount)
for(i in 1:nrow(dmetrics)){
d1<-paste("2016-",as.character(dmetrics[[2]][i]),"-",as.character(dmetrics[[3]][i]),sep = "")
dmetrics$date[i]<-d1
}
dmetrics$date<-as.POSIXct(dmetrics$date,origin = "1970-01-01",tz="UTC")
dmetrics
}
ajax_metrics<-readJSON()
#page_entities<-unique(page_metrics$entityName)
ajax_metrics_unique<-ajax_metrics[!duplicated(ajax_metrics$entityName),]
s=1236
all_ajax_metrics<-data.frame()
for(i in 1:nrow(ajax_metrics_unique)){
sample<-ajax_metrics_unique[i,]
sample$collectionTs=start_timestamp
set.seed(s)
if(i==1 || i==10 || i==12)
metrics<-create_ajax_metrics_peakTime(sample,peakRange = 2000:2250,peakLowRange = 1750:2000,lowRange = 1500:1750,
dftRange= 0:10,trtRange = 24:28,errorRange=5:10,factor=0.02,errorFactor=0.01)
else if(i==2 || i==4 || i==11)
metrics<-create_ajax_metrics_peakTime(sample,peakRange = 2750:3000,peakLowRange = 2500:2750,lowRange = 2250:2500,
dftRange = 0:10,trtRange = 32:36,errorRange=10:15,factor=0.01,errorFactor=0.005)
else if(i==5)
metrics<-create_ajax_metrics_peakTime(sample,peakRange = 3500:3750,peakLowRange = 3250:3500,lowRange = 3000:3250,
dftRange = 0:10,trtRange = 40:44,errorRange=15:20,factor=0.04,errorFactor=0.03)
else if(i==7 )
metrics<-create_ajax_metrics_peakTime(sample,peakRange = 4250:4500,peakLowRange = 4000:4250,lowRange = 3750:4000,
dftRange = 0:10,trtRange = 48:52,errorRange=20:25,factor=0.03,errorFactor=0.02)
else
metrics<-create_ajax_metrics_peakTime(sample,peakRange = 5000:5250,peakLowRange = 4750:5000,lowRange = 4500:4750,
dftRange = 0:10,trtRange = 56:60,errorRange=25:30,factor=-0.02,errorFactor=-0.025)
filename<-paste("Sim_Ajax_Metrics_",i,"_30days",".json",sep = "")
all_ajax_metrics<-rbind(all_ajax_metrics,metrics)
mj<-toJSON(metrics,pretty=TRUE)
write(mj,file=filename)
print(i)
s=s+1
}
setwd("C:/Users/smgambhi/Downloads/Data Science Specialization/4.Exploratory_Data_Analysis/EDA_Assignment1")
data<-read.csv("data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data <- subset(data, Date>="2007-02-01" & Date<="2007-02-02")
gap<-data[['Global_active_power']]
gap<-as.numeric(as.character(gap))
dateTime <- paste(data$Date, data$Time)
dateTime <- as.POSIXct(dateTime)
plot(data$Global_active_power~dateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data <- subset(data, Date>="2007-02-01" & Date<="2007-02-02")
dateTime <- paste(data$Date, data$Time)
dateTime <- as.POSIXct(dateTime)
plot(data$Sub_metering_1~dateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(data$Sub_metering_2~dateTime,col="red")
lines(data$Sub_metering_3~dateTime,col="blue")
legend("topright", pch = 1, col = c("black","red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data <- subset(data, Date>="2007-02-01" & Date<="2007-02-02")
dateTime <- paste(data$Date, data$Time)
dateTime <- as.POSIXct(dateTime)
par(mfrow=c(2,2))
with(data,{
plot(data$Global_active_power~dateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(data$Voltage~dateTime, type="l",
ylab="Voltage", xlab="datetime")
plot(data$Sub_metering_1~dateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(data$Sub_metering_2~dateTime,col="red")
lines(data$Sub_metering_3~dateTime,col="blue")
plot(data$Global_reactive_power~dateTime, type="l",
ylab="Global Reactive Power (kilowatts)", xlab="datetime")
})
with(data,{
plot(data$Global_active_power~dateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(data$Voltage~dateTime, type="l",
ylab="Voltage", xlab="datetime")
plot(data$Sub_metering_1~dateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(data$Sub_metering_2~dateTime,col="red")
lines(data$Sub_metering_3~dateTime,col="blue")
legend("topright", pch = 1, col = c("black","red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(data$Global_reactive_power~dateTime, type="l",
ylab="Global Reactive Power (kilowatts)", xlab="datetime")
with(data,{
plot(data$Global_active_power~dateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(data$Voltage~dateTime, type="l",
ylab="Voltage", xlab="datetime")
plot(data$Sub_metering_1~dateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(data$Sub_metering_2~dateTime,col="red")
lines(data$Sub_metering_3~dateTime,col="blue")
legend("topright", pch = 1, col = c("black","red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
plot(data$Global_reactive_power~dateTime, type="l",
ylab="Global Reactive Power (kilowatts)", xlab="datetime")
})
